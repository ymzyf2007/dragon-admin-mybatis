<?xml version="1.0" encoding="UTF-8"?>
<!--
scan:
当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="300 seconds" debug="false">
    <!-- 设置上下文名称 -->
    <contextName>dragonAdmin</contextName>

    <!-- 设置变量,通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量-->
    <property name="LOG_CHARSET" value="UTF-8" />
    <property name="LOG_PATTERN" value="%black(%contextName-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}) - %gray(%msg%n)" />
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_PATH" value="E://applogs/dragon-admin" />

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <!-- <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> -->
            <pattern>${LOG_PATTERN}</pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/dragon-admin.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_PATH}/dragon-admin-%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 日志文件最大的大小 除按日志记录之外，还配置了日志文件不能超过10M，若超过10M，日志文件会以索引0开始 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>
    <!-- 日志记录器，日期滚动记录 -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/dragon-admin-error.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <FileNamePattern>${LOG_PATH}/error/dragon-admin-error-%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
             -->
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
     设置logger: 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。
     name:
     用来指定受此logger约束的某一个包或者具体的某一个类。
     level:
     用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
     additivity:
     是否向上级logger传递打印信息。默认是true。
     <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
     -->

    <!-- jdbc.sqlonly: 仅记录 SQL -->
    <logger name="jdbc.sqlonly" level="OFF" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>
    <!-- jdbc.resultset：会产生更多的记录信息，因为记录了 ResultSet 的信息 -->
    <logger name="jdbc.resultset" level="ERROR" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>
    <!-- 如想看到表格数据，将OFF改为INFO -->
    <logger name="jdbc.resultsettable" level="INFO" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>
    <!-- jdbc.connection：记录连接打开、关闭等信息，有利于调试数据库连接相关问题 -->
    <logger name="jdbc.connection" level="OFF" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>
    <!-- jdbc.sqltiming：记录 SQL 以及耗时信息 -->
    <logger name="jdbc.sqltiming" level="INFO" additivity="true">
        <appender-ref ref="STDOUT" />
    </logger>
    <!-- jdbc.audit：记录除了 ResultSet 之外的所有 JDBC 调用信息，会产生大量的记录，有利于调试跟踪具体的 JDBC 问题 -->
    <logger name="jdbc.audit" level="OFF" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <!-- show parameters for hibernate sql 专为Hibernate定制 -->
    <!--<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG"/>
    <logger name="org.hibernate.SQL" level="DEBUG"/>
    <logger name="org.hibernate.engine.QueryParameters" level="DEBUG"/>
    <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG"/>-->

    <!-- ****************************************************************************************** -->
    <!-- ****************************** 本地开发只在控制台打印日志 ************************************* -->
    <!-- ****************************************************************************************** -->
    <springProfile name="dev">
        <!-- 认所有的包以info输出级别 -->
        <root level="debug">
            <appender-ref ref="STDOUT" />
        </root>

        <!-- 各个服务的包在本地执行的时候，打开debug模式 -->
        <logger name="com.dragon" level="debug" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
    </springProfile>

    <springProfile name="test">
        <!-- 记录到文件时，记录两类一类是error日志，一个是所有日志 -->
        <root level="INFO">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="FILE" />
        </root>
        <logger name="com.dragon" level="debug" additivity="false">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="FILE" />
        </logger>
    </springProfile>

    <!-- ********************************************************************************************** -->
    <!-- ****** 放到服务器上不管在什么环境都只在文件记录日志，控制台（catalina.out）打印logback捕获不到的日志 ****** -->
    <!-- ********************************************************************************************** -->
    <springProfile name="product, prod">
        <!--记录到文件时，记录两类一类是error日志，一个是所有日志-->
        <root level="INFO">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_ALL" />
        </root>
    </springProfile>

</configuration>